input {
  beats {
    id => "samp"
    host => "51.178.19.80"
    port => 5088
  }
}

filter {
   mutate {
    remove_field => ["host"]
  }
  grok {
    match => { "[log][file][path]" => ".*/(?<logname>\w+)\..*" }
  }
  grok {
    match => { "message" => "\[%{DATESTAMP:[@metadata][timestamp]}\] \[%{LOGLEVEL:loglevel}\] %{GREEDYDATA:message}" }
    overwrite => [ "message" ]
    tag_on_failure => ["grok_log_preamble_fail"]
  }
  date {
    match => [ "[@metadata][timestamp]", "dd/MM/yyyy HH:mm:ss"]
  }

  # connect.log
  if [logname] == "connect" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => [ "%{CONNECT_LOG}", "%{DISCONNECT_LOG}", "%{OLD_LOGIN_LOG}", "%{NEW_LOGIN_LOG}" ] }
      tag_on_failure => ["grok_connectlog_fail"]
    }

    # geoip
    if [player][ip] {
        geoip {
          source => "[player][ip]"
        }
    }
  } else if [logname] == "adminduty" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => [ "%{ADMIN_DUTY_LOG}" ] }
      tag_on_failure => ["grok_adminduty_fail"]
    }
  } else if [logname] == "damage" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => [ "%{DAMAGE_LOG_ATTACKER}", "%{DAMAGE_LOG_VICTIM}", "%{DAMAGE_LOG_KILL}", "%{DAMAGE_LOG_DEATH}" ] }
      tag_on_failure => ["grok_damage_fail"]
    }
  } else if [logname] == "money" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => [ "%{MONEY_LOG_MONEY_STATE}" ] }
      tag_on_failure => ["grok_money_state_fail"]
    }
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => [ "%{MONEY_LOG_INCOME}", "%{MONEY_LOG_LOSS}", "%{MONEY_LOG_SET}" ] }
      tag_on_failure => ["grok_money_fail"]
    }
  } else if [logname] == "sejf" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => [ "%{SEJF_LOG}" ] }
      tag_on_failure => ["grok_sejflog_fail"]
    }
  } else if [logname] == "nick" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => [ "%{NICK_LOG}", "%{NICK_LOG_ADMIN}", "%{NICK_LOG_MASKA}" ] }
      tag_on_failure => ["grok_nicklog_fail"]
    }
    mutate {
      add_field => { "old_name" => "%{[player][nick]}" }
    }
  } else if [logname] == "premium" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => [ "%{PREMIUM_PRZEDMIOT}", "%{PREMIUM_SLOT}", "%{PREMIUM_ZMIANA}", "%{PREMIUM_SKIN}", "%{PREMIUM_NR_TEL}", "%{PREMIUM_POJAZD}", "%{MRUCZNIK_COINS}" ] }
      tag_on_failure => ["grok_premiumlog_fail"]
    }
  } else {
    # player data
    grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => {
          "message" => [
              "(?<!Admin )%{PLAYER_NAME}",
              "Admin %{PLAYER_ADMIN}",
              "%{WEAPON}",
              "%{WEAPON_AMMO}",
              "%{VEHICLE}",
              "%{HOUSE}",
              "%{BUSINESS}",
              "%{FRACTION}",
              "%{INT:money:int}\$"
          ]
        }
        break_on_match => false
        tag_on_failure => []
    }

    # parsowanie wielu graczy w wiadomoÅ›ci
    if [message] =~ /{Player: .*}.*{Player: .*}/ {
      ruby {
        code => 
          "begin
            message = event.get('message')
            result = message.scan(/(?:{Player: (?<nick>\w+[_ ]\w+(?:[_ ]\w+)?)(?:\[(?<uid>\d+)\])?})+/)
            result = result.flatten
            event.set('players', result)
          end"
      }
    }
  }
}
